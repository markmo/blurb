case class Blurb @JsonCreator()(@JsonProperty("_id") _id: ObjectId,
                                @JsonProperty("question") question: String,
                                @JsonProperty("answer") answer: String,
                                @JsonProperty("tags") tags: Array[String],
                                @JsonProperty("createdBy") createdBy: Identity,
                                @JsonProperty("createdDate") createdDate: DateTime,
                                @JsonProperty("lastModifiedBy") lastModifiedBy: Identity,
                                @JsonProperty("lastModifiedDate") lastModifiedDate: DateTime) extends Indexable {

  def id = _id.toString
}

object Blurb {

  implicit object dateTimeStringFormat extends Format[DateTime] {

    def reads(json: JsValue) = json match {
      case jsString: JsString =>
        JsSuccess(
          DateTime.parse(jsString.value, ISODateTimeFormat.dateTime())
        )
      case other =>
        JsError("Can't parse JSON path as a DateTime. JSON content = " +
          other.toString())
    }

    def writes(dt: DateTime) =
      JsString(dt.toString(ISODateTimeFormat.dateTime()))

  }

  implicit val blurbFormat = (
    (__ \ "_id").format[Option[BSONObjectID]] and
    (__ \ "question").format[String] and
    (__ \ "answer").format[String] and
    (__ \ "tags").format[Array[String]] and
    (__ \ "createdBy").format[Identity] and
    (__ \ "createdDate").format[DateTime] and
    (__ \ "lastModifiedBy").format[Identity] and
    (__ \ "lastModifiedDate").format[DateTime]
    )(Blurb.apply, unlift(Blurb.unapply))

  }

val modifier = BSONDocument(
  "$set" -> BSONDocument(
    "question" -> BSONString(q),
    "answer" -> BSONString(a),
    "tags" -> BSONArray(tags.map(tag => BSONString(tag)).toTraversable)
    "lastModifiedBy" -> user,
    "lastModifiedDate" -> DateTime.now()
  )
)
val objectId = new BSONObjectID(oid.toString)
collection.update(BSONDocument("_id" -> objectId), modifier)

import play.modules.reactivemongo.json.BSONFormats._

or

// but this implementation is different from the one above
implicit object BSONObjectIDFormat extends Format[BSONObjectID] {
    def writes(objectId: BSONObjectID): JsValue = JsString(objectId.toString())
    def reads(json: JsValue): JsResult[BSONObjectID] = json match {
      case JsString(x) => {
        val maybeOID: Try[BSONObjectID] = BSONObjectID.parse(x)
        if(maybeOID.isSuccess) JsSuccess(maybeOID.get) else {
          JsError("Expected BSONObjectID as JsString")
        }
      }
      case _ => JsError("Expected BSONObjectID as JsString")
    }
  }

@IndexMapping(value =
  "{columns: {" +
    "properties: {" +
      "question: {type: \"string\"}," +
      "answer: {type: \"string\"}," +
      "tags: {type: \"string\", index_name: \"tag\", index: \"not_analyzed\"}," +
      "author: {type: \"string\", index: \"not_analyzed\"}," +
      "createdDate: {type: \"date\"}," +
      "createdYearMonth: {type: \"string\", index: \"not_analyzed\"}," +
      "lastEditedBy: {type: \"string\", index: \"not_analyzed\"}," +
      "lastEditedDate: {type: \"date\"}," +
      "lastModifiedYearMonth: {type: \"string\", index: \"not_analyzed\"}" +
    "}}")


  def list(page: Int = 0, pageSize: Int = 10,
           orderBy: String = "lastModifiedDate", orderDirection: Int = -1,
           filter: String = "*") =
    Repository.pageBlurbs(page, pageSize, orderBy, orderDirection, filter)

  def tagOptions = Repository.getTags.map(tag => (tag, tag)).toMap
