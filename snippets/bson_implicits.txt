  implicit object UserIdBSONReader extends BSONDocumentReader[UserId] {
    def read(doc: BSONDocument): UserId =
      UserId(
        doc.getAs[String]("id").get,
        doc.getAs[String]("providerId").get
      )
  }

  implicit object UserIdBSONWriter extends BSONDocumentWriter[UserId] {
    def write(userId: UserId): BSONDocument =
      BSONDocument(
        "id" -> userId.id,
        "providerId" -> userId.providerId
      )
  }

  implicit object IdentityBSONReader extends BSONDocumentReader[Identity] {
    def read(doc: BSONDocument): Identity =
      SocialUser(
        id = doc.getAs[UserId]("id").get,
        firstName = doc.getAs[String]("firstName").get,
        lastName = doc.getAs[String]("lastName").get,
        fullName = doc.getAs[String]("fullName").get,
        email = doc.getAs[String]("email"),
        avatarUrl = doc.getAs[String]("avatarUrl"),
        authMethod = AuthenticationMethod(doc.getAs[String]("authMethod").get)
      )
  }

  implicit object IdentityBSONWriter extends BSONDocumentWriter[Identity] {
    def write(identity: Identity): BSONDocument =
      BSONDocument(
        "id" -> identity.id,
        "firstName" -> identity.firstName,
        "lastName" -> identity.lastName,
        "fullName" -> identity.fullName,
        "email" -> identity.email,
        "avatarUrl" -> identity.avatarUrl,
        "authMethod" -> identity.authMethod.method
      )
  }

  implicit object BlurbBSONReader extends BSONDocumentReader[Blurb] {
    def read(doc: BSONDocument): Blurb =
      Blurb(
        doc.getAs[BSONObjectID]("_id"),
        doc.getAs[String]("question").get,
        doc.getAs[String]("answer").get,
        doc.getAs[Array[String]]("tags").get,
        doc.getAs[Identity]("createdBy"),
        doc.getAs[BSONDateTime]("createdDate").map(dt => new DateTime(dt.value)),
        doc.getAs[Identity]("lastModifiedBy"),
        doc.getAs[BSONDateTime]("lastModifiedDate").map(dt => new DateTime(dt.value))
      )
  }

  implicit object BlurbBSONWriter extends BSONDocumentWriter[Blurb] {
    def write(blurb: Blurb): BSONDocument =
      BSONDocument(
        "_id" -> blurb.key.getOrElse(BSONObjectID.generate),
        "question" -> blurb.question,
        "answer" -> blurb.answer,
        "tags" -> blurb.tags,
        "createdBy" -> blurb.createdBy,
        "createdDate" -> blurb.createdDate.map(date => BSONDateTime(date.getMillis)),
        "lastModifiedBy" -> blurb.lastModifiedBy,
        "lastModifiedDate" -> blurb.lastModifiedDate.map(date => BSONDateTime(date.getMillis))
      )
  }

  implicit object userIdReads extends Reads[UserId] {
    def reads(json: JsValue) = json match {
      case jsObject: JsObject =>
        JsSuccess(
          UserId(
            id = (jsObject \ "id").as[String],
            providerId = (jsObject \ "providerId").as[String]
          )
        )
      case other =>
        JsError("Can't parse JSON path as a UserId. JSON content = " +
          other.toString())
    }
  }

  implicit object userIdWrites extends Writes[UserId] {
    def writes(userId: UserId) =
      Json.obj(
        "id" -> userId.id,
        "providerId" -> userId.providerId
      )
  }

  implicit val userIdReads: Reads[UserId] = (
    (__ \ "id").read[String] ~
    (__ \ "providerId").read[String]
    )(UserId)

  implicit object identityReads extends Reads[Identity] {
    def reads(json: JsValue) = json match {
      case jsObject: JsObject =>
        JsSuccess(
          SocialUser(
            id = (jsObject \ "id").as[UserId],
            firstName = (jsObject \ "firstName").as[String],
            lastName = (jsObject \ "lastName").as[String],
            fullName = (jsObject \ "fullName").as[String],
            email = (jsObject \ "email").asOpt[String],
            avatarUrl = (jsObject \ "avatarUrl").asOpt[String],
            authMethod = AuthenticationMethod((jsObject \ "authMethod").as[String])
          )
        )
      case other =>
        JsError("Can't parse JSON path as an Identity. JSON content = " +
          other.toString())
    }
  }
